class Solution {
public:
    int merge_sort(vector<int>&nums, int low, int mid, int high){
	int count=0;
	int j=mid+1;
	for(int i=low; i<=mid; i++){
		while(j<=high && nums[i]>2L*nums[j]){
			j++;
		}
		count+=(j-(mid+1));
	}
	vector<int>temp;
	int left=low, right=mid+1;
	while(left<=mid && right<=high){
		if(nums[left]<=nums[right])
			temp.push_back(nums[left++]);
		else
			temp.push_back(nums[right++]);
	}
	while(left<=mid)
		temp.push_back(nums[left++]);
	while(right<=high)
		temp.push_back(nums[right++]);
	for(int i=low; i<=high; i++){
		nums[i]=temp[i-low];
	}
	return count;
}
int merge(vector<int>&nums, int low, int high){
	if(low>=high)
		return 0;
	int mid=(low+high)/2;
	int val;
	val=merge(nums, low, mid);
	val+=merge(nums, mid+1, high);
	val+=merge_sort(nums, low , mid, high);
	return val;
}
    int reversePairs(vector<int>& nums) {
        int n; 
        n=nums.size();
        if(n==0 || n==1)
            return 0;
        return merge(nums, 0, n-1);
    }
};
